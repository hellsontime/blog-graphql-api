extend type Query {
    me: User @auth
    users: [User!]! @paginate(defaultCount: 10)
    user(id: ID! @eq): User @find
}

extend type Mutation {
    createUser(
        name: String!,
        @rules(
            apply: ["min:2"],
            messages: [{
                rule: "min"
                message: "Name should be at least 2 characters length"
            }]
        )
        email: String!,
        @rules(
            apply: ["email", "users:unique"]
        )
        password: String!
        @rules(
            apply: ["min:8"],
            messages: [{
                    rule: "min"
                    message: "The password should be at least 8 characters length"
            }]
        )
    ) : User! @create

    updateUser(
        id: ID!,
        name: String,
        @rules(
            apply: ["min:2"],
            messages: [{
                rule: "min"
                message: "Name should be at least 2 characters length"
            }]
        )
        email: String,
        @rules(
            apply: ["email", "users:unique"]
        )
    ) : User! @update

    deleteUser(id: ID!) : User @delete

    upsertUser(
        id: ID!
        name: String!,
        @rules(
            apply: ["min:2"],
            messages: [{
                rule: "min"
                message: "Name should be at least 2 characters length"
            }]
        )
        email: String!,
        @rules(
            apply: ["email", "users:unique"]
        )
        password: String!,
        @rules(
            apply: ["min:8"],
            messages: [{
                rule: "min"
                message: "The password should be at least 8 characters length"
            }]
        )
    ) : User! @upsert
}

type User {
    id: ID!
    name: String!
    email: String!
    created_at: DateTime!
    updated_at: DateTime!
    posts: [Post!]! @hasMany
}
